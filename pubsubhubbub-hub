#!/usr/bin/perl

use strict;
use lib 'lib';
use HTTP::Daemon;
use HTTP::Status;
use Net::PubSubHubbub::Hub;
use Net::PubSubHubbub::Hub::SubscriberState::InMemory;
use Net::PubSubHubbub::Hub::Subscription;
use Net::PubSubHubbub::Hub::Worker::FetchFeed;
use TheSchwartz;
use Getopt::Long;
use DBD::SQLite;

my $port = 8080;
my $theschwartz_filename = "theschwartz.sqlite";
my $wipe_db = 0;
my $opt_verbose = 0;

GetOptions(
    "verbose" => \$opt_verbose,
    "port=i" => \$port,
    "schwartzfilename=s" => \$theschwartz_filename,
    "wipedb" => \$wipe_db,
    ) or die "Unknown options.";

unless ($wipe_db || -e $theschwartz_filename) {
    die "Option --wipedb not specified and file '$theschwartz_filename' \n" .
        "(value of --schwartzfilename) doesn't exist.\n";
}

if ($wipe_db) {
    init_theschwartz_sqlite_file($theschwartz_filename);
}

my $d = HTTP::Daemon->new(
    LocalPort => $port,
    ReuseAddr => 1,
    ) or die;

my $base_url = $d->url;
$base_url .= "/" unless $base_url =~ m!/$!;

my $schwartz = TheSchwartz->new(
    databases => [{ dsn => "dbi:SQLite:dbname=$theschwartz_filename",
		    user => "",
		    pass => "" }],
    );

# Also a worker in this process
$schwartz->can_do("Net::PubSubHubbub::Hub::Worker::FetchFeed");

my $subscriber_state = Net::PubSubHubbub::Hub::SubscriberState::InMemory->new;
my $hub = Net::PubSubHubbub::Hub->new(
    subscriber_state => $subscriber_state,
    job_queue => $schwartz,
    );

$subscriber_state->add_subscription(
    Net::PubSubHubbub::Hub::Subscription->new(
	topic => "${base_url}feed.atom",
	callback => "${base_url}/callback",
	expiration => time() + 86400,
    ));

print "Hub running at: $base_url\n";
while (my $c = $d->accept) {
    my $child_pid = fork();
    if (!defined($child_pid)) {
        die "Fork failure: $!";
    }
    if ($child_pid) {
        next;
    }
    debug("Connection on pid: $$");
    while (my $r = $c->get_request) {
	my $res = favicon_response($r) || $hub->handle_request($r);
        $c->send_response($res);

        # Interleave processing of 'async' work.  It's not really
        # async in this dummy hub implementation.
        do_async_work();
    }
    $c->close;
    undef($c);
    exit(0);
}

sub do_async_work {
    local $SIG{__WARN__} = sub {
        next if $_[0] =~ /closing dbh with active statement handles/;
        warn $_[0];
    };
    $schwartz->work_until_done;
}

sub debug {
    my $msg = shift;
    chomp $msg;
    if ($opt_verbose) {
        print STDERR "# $msg\n";
    }
}

sub favicon_response {
    my $req = shift;
    return undef unless $req->method eq "GET" && $req->uri eq "/favicon.ico";

    my $ico_data;
    if (open(my $fh, "hub.ico")) {
        $ico_data = do { local $/; <$fh>; };
    }

    if ($ico_data) {
	my $res = HTTP::Response->new(200);
	$res->header("Content-Type" => "image/x-icon");
	$res->content($ico_data);
	return $res;
    } else {
	return HTTP::Response->new(404);
    }
}

sub init_theschwartz_sqlite_file {
    my $file = shift;
    unlink $file;
    open(my $fh, "theschwartz-sqlite-schema.sql")
        or die "Can't find theschwartz-sqlite-schema.sql";
    my $sql = do { local $/; <$fh> };
    my @sql = split /;\s*/, $sql;
    my $dbh = DBI->connect("dbi:SQLite:dbname=$file", "","",
                           { RaiseError => 1 }) or die;
    for my $ddl (@sql) {
        $dbh->do($ddl);
    }
}
